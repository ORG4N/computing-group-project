#pragma checksum "F:\comp2003_2021-group-a\Ecobadge Website\Ecobadge Website\Pages\Directory.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "b402e43eb078db71f774686fd6673b2e632aab0f"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(Ecobadge_Website.Pages.Pages_Directory), @"mvc.1.0.razor-page", @"/Pages/Directory.cshtml")]
namespace Ecobadge_Website.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "F:\comp2003_2021-group-a\Ecobadge Website\Ecobadge Website\Pages\_ViewImports.cshtml"
using Ecobadge_Website;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b402e43eb078db71f774686fd6673b2e632aab0f", @"/Pages/Directory.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d3e0047b77b376c882cc1d8fc91376420ddc4765", @"/Pages/_ViewImports.cshtml")]
    #nullable restore
    public class Pages_Directory : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    #nullable disable
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "F:\comp2003_2021-group-a\Ecobadge Website\Ecobadge Website\Pages\Directory.cshtml"
  
    ViewData["Title"] = "Directory";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            DefineSection("Styles", async() => {
                WriteLiteral("\r\n    <link");
                BeginWriteAttribute("href", " href=\"", 129, "\"", 171, 1);
#nullable restore
#line 8 "F:\comp2003_2021-group-a\Ecobadge Website\Ecobadge Website\Pages\Directory.cshtml"
WriteAttributeValue("", 136, Url.Content("~/css/directory.css"), 136, 35, false);

#line default
#line hidden
#nullable disable
                EndWriteAttribute();
                WriteLiteral(" rel=\"stylesheet\" type=\"text/css\" />\r\n");
            }
            );
            WriteLiteral("\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral("\r\n    <script src=\"https://unpkg.com/feather-icons\"></script>\r\n    <script>\r\n        feather.replace()\r\n    </script>\r\n");
            }
            );
            WriteLiteral(@"
<div class=""container-fluid wrapper"">

    <div class=""row"">

        <div class=""col-6 offset-3 text-container"">
            <div class=""row"">
                <div class=""col-5"">
                    <div class=""row"">
                        <input class=""form-check-input"" type=""checkbox""");
            BeginWriteAttribute("value", " value=\"", 654, "\"", 662, 0);
            EndWriteAttribute();
            WriteLiteral(@" id=""vegan"">
                            <label class=""form-check-label"" for=""vegan"">
                            Vegan Friendly
                        </label>
                    </div>
                    <div class=""row"">
                        <input class=""form-check-input"" type=""checkbox""");
            BeginWriteAttribute("value", " value=\"", 967, "\"", 975, 0);
            EndWriteAttribute();
            WriteLiteral(@" id=""plastic"">
                            <label class=""form-check-label"" for=""plastic"">
                            Doesn't use single use plastic
                        </label>
                    </div>
                    <div class=""row"">
                        <input class=""form-check-input"" type=""checkbox""");
            BeginWriteAttribute("value", " value=\"", 1300, "\"", 1308, 0);
            EndWriteAttribute();
            WriteLiteral(@" id=""foodwaste"">
                            <label class=""form-check-label"" for=""foodwaste"">
                            Foodwaste collection scheme
                        </label>
                    </div>
                    <div class=""row"">
                        <input class=""form-check-input"" type=""checkbox""");
            BeginWriteAttribute("value", " value=\"", 1634, "\"", 1642, 0);
            EndWriteAttribute();
            WriteLiteral(@" id=""local"">
                            <label class=""form-check-label"" for=""local"">
                            Local produce
                        </label>
                    </div>
                </div>

                <div class=""col-5"">
                    <div class=""dropdown py-1"">
                        <button class=""btn-block btn-success dropdown-toggle"" type=""button"" data-toggle=""dropdown"">
                            Location
                            <span class=""caret""></span>
                        </button>
                        <div class=""dropdown-menu"" id=""locations"">

                        </div>
                    </div>

                    <div class=""dropdown py-1"">
                        <button class=""btn-block btn-success dropdown-toggle"" type=""button"" data-toggle=""dropdown"">
                            Cuisine
                            <span class=""caret""></span>
                        </button>
                        <div class=""dropdown-");
            WriteLiteral(@"menu"" id=""cuisines"">
                        </div>
                    </div>

                    <div class=""dropdown py-1"">
                        <button class=""btn-block btn-success dropdown-toggle"" type=""button"" data-toggle=""dropdown"">
                            Eco Badge Tier
                            <span class=""caret""></span>
                        </button>
                        <div class=""dropdown-menu"">
                            <a class=""dropdown-item"" href=""#"" onclick=""ddTier(this)"">Bronze</a>
                            <a class=""dropdown-item"" href=""#"" onclick=""ddTier(this)"">Silver</a>
                            <a class=""dropdown-item"" href=""#"" onclick=""ddTier(this)"">Gold</a>
                            <a class=""dropdown-item"" href=""#"" onclick=""ddTier(this)"">Platinum</a>
                        </div>
                    </div>
                </div>

                <div class=""col-2"">
                    <button type=""button"" class=""btn btn-primary btn-lg bt");
            WriteLiteral(@"n-block"" style=""display: block; width: 100%; height:100%;"" onclick=""applyFilters()"">
                        <i data-feather=""refresh-cw""></i>
                    </button>
                </div>

            </div>
        </div>
    </div>

    <div class=""table-wrapper"">

        <table class=""table table-hover"" style=""margin-bottom:0"" id=""businesses"">

            <thead>
                <tr>
                    <th>Company</th>
                    <th>County</th>
                    <th>Street</th>
                    <th>Postcode</th>
                    <th>Telephone</th>
                    <th>Tier</th>
                    <th>Cuisines</th>
                    <th style=""text-align:center"">Vegan friendly</th>
                    <th style=""text-align:center"">Doesn't use single use plastic</th>
                    <th style=""text-align:center"">Foodwaste collection scheme</th>
                    <th style=""text-align:center"">Local produce</th>
                </tr>
         ");
            WriteLiteral(@"   </thead>

            <tbody>

            </tbody>

        </table>
    </div>
</div>


<script>
    const element = document.getElementById(""parent"");
    element.classList.remove(""container"");
    element.classList.add(""container-fluid"");

    const locations = [];
    const cuisines = {};

    const locationFilters = [];
    const cuisineFilters = [];
    const tierFilters = [];

    fetchCompanies().then(fetchCuisines).then(fetchCompanyCuisines).then(function() {
        locationFiltersItems();
        cuisineFiltersItems();
    })

    function ddTier(element){

        if(tierFilters.includes(element.innerText)){

            tierFilters.splice(tierFilters.indexOf(element.innerText), 1);
            element.classList.remove(""active"");
        }

        else{
            tierFilters.push(element.innerText);
            element.classList.add(""active"");
        }
    }

    function ddCuisines(element){

        if(cuisineFilters.includes(element.innerText)");
            WriteLiteral(@"){
            cuisineFilters.splice(cuisineFilters.indexOf(element.id), 1);
            element.classList.remove(""active"");
        }

        else{
            cuisineFilters.push(element.innerText);
            element.classList.add(""active"");
        }
    }

    function ddLocations(element){

        if(locationFilters.includes(element.innerText)){

            locationFilters.splice(locationFilters.indexOf(element.innerText), 1);
            element.classList.remove(""active"");
        }

        else{
            locationFilters.push(element.innerText);
            element.classList.add(""active"");
        }
    }

    function applyFilters(){

        $(""#businesses tbody tr"").remove();

        fetchCompanies().then(fetchCuisines).then(fetchCompanyCuisines).then(function() {

            if(tierFilters.length>0){
                rows = document.querySelectorAll('tr');
                for(var i=1; i<rows.length; i++){
                    const tiersCol = rows[i].getEle");
            WriteLiteral(@"mentsByTagName('td')[5];

                    if(!tierFilters.includes(tiersCol.innerText)){
                        rows[i].remove();
                    }

                }
            }

            if(locationFilters.length>0){
                rows = document.querySelectorAll('tr');

                for(var i=1; i<rows.length; i++){
                    const locationCol = rows[i].getElementsByTagName('td')[1];

                    if(!locationFilters.includes(locationCol.innerText)){
                        rows[i].remove();
                    }

                }
            }

            const mustHaves = [""vegan"", ""plastic"", ""foodwaste"", ""local""];

            for(var i=0; i<mustHaves.length; i++){
                const element = document.getElementById(mustHaves[i]);

                if(element.checked == true){
                    rows = document.querySelectorAll('tr');

                    for(var j=1; j<rows.length; j++){

                        let mh = rows[j].");
            WriteLiteral(@"getElementsByTagName('td')[7];

                        if(i==1) {mh = rows[j].getElementsByTagName('td')[8];}
                        if(i==2) {mh = rows[j].getElementsByTagName('td')[9];}
                        if(i==3) {mh = rows[j].getElementsByTagName('td')[10];}

                        const child = mh.firstChild;

                        if(child.classList.contains(""feather-x"")){
                            rows[j].remove();
                        }
                    }
                }
            }


            if(cuisineFilters.length>0){
                let rows = document.querySelectorAll('tr');
                for(var i=1; i<rows.length; i++){

                    const cuisinesCol = rows[i].getElementsByTagName('td')[6];

                    let cuisines = cuisinesCol.innerText.split(""\n"");
                    cuisines = cuisines.filter(item => item); // Remove empty strings

                    let del = true;
                    for(var j=0; j<cuisines.length; j");
            WriteLiteral(@"++){
                        if(cuisineFilters.includes(cuisines[j])){
                            console.log(""Row includes:"", rows[i]);
                            del = false;
                        }
                    }

                    if (del == true){
                        rows[i].remove();
                    }
                }
            }

        })
    }

    function locationFiltersItems(){

        locations.sort();

        for(i=0; i<locations.length; i++){
            const value = locations[i];
            $(""#locations"").append(`<a class=""dropdown-item"" href=""#"" onclick=""ddLocations(this)"">${value}</a>`);
        }
    }

    function cuisineFiltersItems(){

        const cuisineList  = [];

        for (var key in cuisines){
            const value = cuisines[key];
            cuisineList.push(value);
        }

        // Easier to sort a list than a dictionary so export all cuisine names within the dict to cuisineList
        cuisineList.sor");
            WriteLiteral(@"t();

        // Print the alpabetical ordering of cuisines
        for(i=0; i<cuisineList.length; i++){
            var value = cuisineList[i];
            $(""#cuisines"").append(`<a class=""dropdown-item"" href=""#"" onclick=""ddCuisines(this)"">${value}</a>`);
        }
    }

    async function fetchCompanies() {

        const url = ""https://localhost:44393/api/companies"";
        const raw = await fetch(url);

        const data = await raw.json();

        data.forEach(({ companyId, companyName, county, address, postcode, tel, ecobadgeTier, veganDishes, singleUsePlastic, foodWasteCollectionScheme, localProduce }) => {
            

            var mustHaves = [veganDishes, singleUsePlastic, foodWasteCollectionScheme, localProduce];

            for(var i = 0; i<4; i++){

                if (mustHaves[i] == true){
                    mustHaves[i] = '<i data-feather=""check""></i>';
                }
                else{
                    mustHaves[i] = '<i data-feather=""x""></i>';
 ");
            WriteLiteral(@"               }
            }

            veganDishes = mustHaves[0];
            singleUsePlastic = mustHaves[1];
            foodWasteCollectionScheme = mustHaves[2];
            localProduce = mustHaves[3];

            $(""#businesses"").find('tbody').append(`<tr id=""${companyId}"" class=""js-file-line"">
                <td>${companyName}</td>
                <td>${county}</td>
                <td>${address}</td>
                <td>${postcode}</td>
                <td>${tel}</td>
                <td>${ecobadgeTier}</td>
                <td></td>
                <td style=""text-align:center"">${veganDishes}</td>
                <td style=""text-align:center"">${singleUsePlastic}</td>
                <td style=""text-align:center"">${foodWasteCollectionScheme}</td>
                <td style=""text-align:center"">${localProduce}</td>
                </tr>`);

            if (!locations.includes(county)){
                locations.push(county);
            }
        });
        
        fea");
            WriteLiteral(@"ther.replace()
    }

    async function fetchCuisines() {

        const url = ""https://localhost:44393/api/cuisines"";
        const raw = await fetch(url);

        const data = await raw.json();

        data.forEach(({cuisineId, cuisineName }) => {
            cuisines[cuisineId] = cuisineName;
        });
    }

    async function fetchCompanyCuisines(){
        const url = ""https://localhost:44393/api/companycuisines"";
        const raw = await fetch(url);

        const data = await raw.json();

        data.forEach(({cuisineId, companyId }) => {

            const row = document.getElementById(companyId);

            if(row){
                const value = cuisines[cuisineId];
                const col = row.getElementsByTagName('td')[6];
                col.innerText += value + ""\n"";
            }
        });

    }

</script>");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Ecobadge_Website.Pages.DirectoryModel> Html { get; private set; } = default!;
        #nullable disable
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Ecobadge_Website.Pages.DirectoryModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Ecobadge_Website.Pages.DirectoryModel>)PageContext?.ViewData;
        public Ecobadge_Website.Pages.DirectoryModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
